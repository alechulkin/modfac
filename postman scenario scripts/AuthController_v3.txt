Here’s a comprehensive Postman collection (JSON) tailored to your updated AuthControllerIntegrationTest setup—with dynamic AWS-style token generation using pre-request scripts. This way, your collection automatically logs in users and retrieves JWTs before running protected requests.

What It Includes

Pre-request script at the collection level:

Log in as admin or simple user depending on the request.

Store retrieved JWT into collection variable ({{authToken}}).

Requests for:

POST /auth/register/admin

POST /auth/register/user

POST /auth/login

Automatic Authorization injection: All secured requests pick up the Bearer {{authToken}} header automatically.

Assertions matching your integration tests:

Success/Failure for each use case (201 or 400, unauthorized 401, forbidden 403).

JSON validation (message, token, role, username).

Postman Collection JSON
{
  "info": {
    "name": "AuthController Tests (With Auto-Login)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Automatically fetches JWT before each request and uses it for authorization."
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8080/modfac" },
    { "key": "authToken", "value": "", "type": "string" }
  ],
  "item": [
    {
      "name": "Pre-Request: Login for protected endpoints",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const url = pm.collectionVariables.get('baseUrl');",
              "const endpoint = pm.request.url.getPath();",
              "let loginTarget = '';",
              "",
              "if (endpoint.includes('/auth/register/admin')) {",
              "    loginTarget = '/auth/login';",
              "    pm.collectionVariables.set('loginBody', JSON.stringify({ username: 'admin1', password: 'securePassword' }));",
              "} else if (endpoint.includes('/auth/register/user')) {",
              "    loginTarget = '/auth/login';",
              "    pm.collectionVariables.set('loginBody', JSON.stringify({ username: 'admin1', password: 'securePassword' }));",
              "} else {",
              "    pm.collectionVariables.set('authToken', '');",
              "    return;",
              "}",
              "",
              "// Perform login request to retrieve JWT",
              "pm.sendRequest({",
              "    url: url + loginTarget,",
              "    method: 'POST',",
              "    header: { 'Content-Type': 'application/json' },",
              "    body: { mode: 'raw', raw: pm.collectionVariables.get('loginBody') }",
              "}, function (err, res) {",
              "    if (!err && res && res.json().token) {",
              "        pm.collectionVariables.set('authToken', res.json().token);",
              "    } else {",
              "        console.error('Login failed:', err || res.text());",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": { "method": "GET", "url": "" }
    },
    {
      "name": "Register Admin - Success",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{authToken}}" }
        ],
        "url": { "raw": "{{baseUrl}}/auth/register/admin", "host": ["{{baseUrl}}"], "path": ["auth","register","admin"] },
        "body": { "mode": "raw", "raw": "{ \"username\": \"newAdmin\", \"password\": \"securePassword\" }" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "pm.test('Correct message', () => pm.expect(pm.response.json().message).to.eql('Admin user created successfully'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Admin - Forbidden (USER role)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{authToken}}" }
        ],
        "url": { "raw": "{{baseUrl}}/auth/register/admin", "host": ["{{baseUrl}}"], "path": ["auth","register","admin"] },
        "body": { "mode": "raw", "raw": "{ \"username\": \"failAdmin\", \"password\": \"securePassword\" }" }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// override login to USER role",
              "pm.collectionVariables.set('loginBody', JSON.stringify({ username: 'user1', password: 'securePassword' }));"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [ "pm.test('403 Forbidden', () => pm.response.to.have.status(403));" ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Admin - Unauthorized (no token)",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": { "raw": "{{baseUrl}}/auth/register/admin", "host": ["{{baseUrl}}"], "path":["auth","register","admin"] },
        "body": { "mode": "raw", "raw": "{ \"username\": \"noTokenAdmin\", \"password\": \"securePassword\" }" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [ "pm.test('401 Unauthorized', () => pm.response.to.have.status(401));" ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register User - Success (by Admin)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{authToken}}" }
        ],
        "url": { "raw": "{{baseUrl}}/auth/register/user", "host": ["{{baseUrl}}"], "path":["auth","register","user"] },
        "body": { "mode": "raw", "raw": "{ \"username\": \"newUser\", \"password\": \"securePassword\" }" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "pm.test('Correct message', () => pm.expect(pm.response.json().message).to.eql('User registered successfully'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register User - Forbidden (USER role)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{authToken}}" }
        ],
        "url": { "raw": "{{baseUrl}}/auth/register/user", "host":["{{baseUrl}}"], "path":["auth","register","user"] },
        "body": { "mode": "raw", "raw": "{ \"username\": \"failUser\", \"password\":\"securePassword\" }" }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// override login to USER role for forbidden test",
              "pm.collectionVariables.set('loginBody', JSON.stringify({ username: 'user1', password: 'securePassword' }));"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [ "pm.test('403 Forbidden', () => pm.response.to.have.status(403));" ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login - Success",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": { "raw": "{{baseUrl}}/auth/login", "host":["{{baseUrl}}"], "path":["auth","login"] },
        "body": { "mode": "raw", "raw": "{ \"username\":\"user1\",\"password\":\"securePassword\" }" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "pm.test('JWT token present', () => pm.expect(pm.response.json().token).to.not.be.empty);",
              "pm.test('Correct username', () => pm.expect(pm.response.json().username).to.eql('user1'));",
              "pm.test('Correct role', () => pm.expect(pm.response.json().role).to.eql('USER'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login - Failure",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": { "raw": "{{baseUrl}}/auth/login", "host":["{{baseUrl}}"], "path":["auth","login"] },
        "body": { "mode": "raw", "raw": "{ \"username\":\"user1\",\"password\":\"wrongPassword\" }" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('401 Unauthorized', () => pm.response.to.have.status(401));",
              "pm.test('Correct error message', () => pm.expect(pm.response.json().message).to.eql('Invalid username or password'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register User - Failure",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/register/user",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register", "user"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"testUser\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    pm.expect(pm.response.json().message).to.eql(\"Username already exists\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Admin User - Failure",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/register/admin",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register", "admin"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"admin1\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    pm.expect(pm.response.json().message).to.eql(\"Username already exists\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}

How to Use It in Postman

Import the JSON into Postman via File → Import → Raw text.

Variable Setup:

In your environment or collection, define baseUrl (e.g., "http://localhost:8080/modfac").

You can leave authToken empty—it's updated automatically.

Run Requests:

The pre-request script runs before any protected request.

It performs login (admin or simple user) and sets {{authToken}}.

Secured requests then include the Authorization header automatically.