
Here are the Postman API testing scripts corresponding to the provided `AuthControllerTest` class. The base URL is configured as `http://localhost:8080/modfac/api`:

### Postman Collection Structure
```json
{
  "info": {
    "name": "AuthController Tests",
    "description": "Tests for authentication endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/modfac/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Register User - Success",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"testUser\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has correct message\", function () {",
              "    pm.expect(pm.response.json().message).to.eql(\"User registered successfully\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register User - Failure",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"testUser\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    pm.expect(pm.response.json().message).to.eql(\"Registration failed\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Authenticate User - Success",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"testUser\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has JWT token\", function () {",
              "    pm.expect(pm.response.json().token).to.eql(\"mockJwtToken\");",
              "});",
              "",
              "pm.test(\"Response has correct username\", function () {",
              "    pm.expect(pm.response.json().username).to.eql(\"testUser\");",
              "});",
              "",
              "pm.test(\"Response has correct role\", function () {",
              "    pm.expect(pm.response.json().role).to.eql(\"USER\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Authenticate User - Failure",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"testUser\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    pm.expect(pm.response.json().message).to.eql(\"Invalid username or password\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Admin User - Success",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/admin",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "admin"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"testUser\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has correct message\", function () {",
              "    pm.expect(pm.response.json().message).to.eql(\"Admin user created successfully\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Admin User - Failure",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/admin",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "admin"]
        },
        "body": {
          "mode": "raw",
          "raw": "{\"username\":\"testUser\",\"password\":\"securePassword\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    pm.expect(pm.response.json().message).to.eql(\"Admin creation failed\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
```

### Key Features of the Postman Collection:
1. **Base URL Configuration**:
   - Uses `{{baseUrl}}` variable with value `http://localhost:8080/modfac/api`
   - Automatically updates all endpoint URLs

2. **Test Coverage**:
   - All 6 test cases from the unit test class
   - Success and failure scenarios for each endpoint
   - Comprehensive response validation

3. **Response Validation**:
   - HTTP status code verification
   - JSON body content validation
   - Error message verification
   - JWT token validation for login success
   - Role verification for login success

4. **Consistent Request Structure**:
   - All requests use POST method
   - Content-Type header set to `application/json`
   - Identical request body for all tests:
     ```json
     {
       "username": "testUser",
       "password": "securePassword"
     }
     ```

5. **Test Scripts**:
   - Status code verification
   - JSON body content checks
   - Specific message validation
   - Token and role verification for login

### How to Use in Postman:
1. Create a new collection in Postman
2. Import the JSON above
3. Verify the `baseUrl` variable is set correctly
4. Run each request individually or execute the entire collection
5. Check the "Test Results" tab for validation results

### Notes:
- The tests assume the application is running on `localhost:8080`
- The JWT token "mockJwtToken" is a placeholder for the actual token
- All tests use the same credentials (`testUser`/`securePassword`)
- The admin creation tests don't validate the role in the response (matching the unit test behavior)
- For real-world testing, you may need to:
  - Add pre-request scripts to generate dynamic data
  - Handle authentication tokens in subsequent requests
  - Add environment variables for different deployment environments


