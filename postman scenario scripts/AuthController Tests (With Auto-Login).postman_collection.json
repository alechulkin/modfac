{
	"info": {
		"_postman_id": "9aa1147b-e03b-4585-9597-c79279eda3ce",
		"name": "AuthController Tests Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48205789"
	},
	"item": [
		{
			"name": "Admin Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json = pm.response.json();",
							"pm.collectionVariables.set('adminToken', json.token);",
							"console.log('Admin token set:', json.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"admin1\", \"password\": \"adminpass1\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json = pm.response.json();",
							"pm.collectionVariables.set('userToken', json.token);",
							"console.log('User token set:', json.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"user1\", \"password\": \"password1\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Admin - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('200 OK', () => pm.response.to.have.status(200));",
							"pm.test('Correct message', () => pm.expect(pm.response.json().message).to.eql('Admin user created successfully'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{adminToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"newAdmin13\", \"password\": \"securePassword\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/admin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Admin - Forbidden (USER role)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// override login to USER role",
							"pm.collectionVariables.set('loginBody', JSON.stringify({ username: 'admin1', password: 'securePassword' }));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('403 Forbidden', () => pm.response.to.have.status(403));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{userToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"failAdmin\", \"password\": \"securePassword\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/admin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Admin - Unauthorized (no token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('401 Unauthorized', () => pm.response.to.have.status(401));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"noTokenAdmin\", \"password\": \"securePassword\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/admin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Admin - Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Username already exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{adminToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin1\",\"password\":\"securePassword\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/admin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User - Success (by Admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('200 OK', () => pm.response.to.have.status(200));",
							"pm.test('Correct message', () => pm.expect(pm.response.json().message).to.eql('User registered successfully'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{adminToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"newUser12\", \"password\": \"securePassword\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User - Forbidden (USER role)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// override login to USER role for forbidden test",
							"pm.collectionVariables.set('loginBody', JSON.stringify({ username: 'user1', password: 'securePassword' }));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('403 Forbidden', () => pm.response.to.have.status(403));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{userToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"failUser\", \"password\":\"securePassword\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User - Unauthorized (no token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 401\", () => pm.response.to.have.status(401));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"failUser\", \"password\": \"securePassword\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User - Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Username already exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{adminToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"user1\",\"password\":\"securePassword\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('200 OK', () => pm.response.to.have.status(200));",
							"pm.test('JWT token present', () => pm.expect(pm.response.json().token).to.not.be.empty);",
							"pm.test('Correct username', () => pm.expect(pm.response.json().username).to.eql('user1'));",
							"pm.test('Correct role', () => pm.expect(pm.response.json().role).to.eql('USER'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\":\"user1\",\"password\":\"password1\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('401 Unauthorized', () => pm.response.to.have.status(401));",
							"pm.test('Correct error message', () => pm.expect(pm.response.json().message).to.eql('Invalid username or password'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\":\"user1\",\"password\":\"wrongPassword\" }"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/modfac"
		},
		{
			"key": "loginBody",
			"value": ""
		},
		{
			"key": "adminToken",
			"value": ""
		},
		{
			"key": "userToken",
			"value": ""
		}
	]
}